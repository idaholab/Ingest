import Config

# Configure your database
config :ingest, Ingest.Repo,
  adapter: Ecto.Adapters.SQLite3,
  database: Path.join(__DIR__, "databases/ingest"),
  binary_id_type: :binary,
  uuid_type: :binary,
  journal_mode: :wal,
  auto_vacuum: :incremental,
  datetime_type: :iso8601,
  load_extensions: [
    "./priv/sqlite_extensions/crypto",
    "./priv/sqlite_extensions/fileio",
    "./priv/sqlite_extensions/fuzzy",
    "./priv/sqlite_extensions/math",
    "./priv/sqlite_extensions/stats",
    "./priv/sqlite_extensions/text",
    "./priv/sqlite_extensions/unicode",
    "./priv/sqlite_extensions/uuid",
    "./priv/sqlite_extensions/vec0",
    "./priv/sqlite_extensions/vsv"
  ]

config :ecto_sqlite3,
  binary_id_type: :string,
  uuid_type: :string

# For development, we disable any cache and enable
# debugging and code reloading.
#
# The watchers configuration can be used to run external
# watchers to your application. For example, we can use it
# to bundle .js and .css sources.
config :ingest_web, IngestWeb.Endpoint,
  # Binding to loopback ipv4 address prevents access from other machines.
  # Change to `ip: {0, 0, 0, 0}` to allow access from other machines.
  http: [ip: {127, 0, 0, 1}, port: 4000],
  check_origin: false,
  code_reloader: true,
  debug_errors: true,
  secret_key_base: "z5aeLcCGuJYv2pb7ZISYCWmEB3eirkBhYuLH2ylEwfF4zgBiYxD/lBUezCJsZIvi",
  watchers: [
    esbuild: {Esbuild, :install_and_run, [:default, ~w(--sourcemap=inline --watch)]},
    tailwind: {Tailwind, :install_and_run, [:default, ~w(--watch)]}
  ]

# ## SSL Support
#
# In order to use HTTPS in development, a self-signed
# certificate can be generated by running the following
# Mix task:
#
#     mix phx.gen.cert
#
# Run `mix help phx.gen.cert` for more information.
#
# The `http:` config above can be replaced with:
#
#     https: [
#       port: 4001,
#       cipher_suite: :strong,
#       keyfile: "priv/cert/selfsigned_key.pem",
#       certfile: "priv/cert/selfsigned.pem"
#     ],
#
# If desired, both `http:` and `https:` keys can be
# configured to run both http and https servers on
# different ports.

# Watch static and templates for browser reloading.
config :ingest_web, IngestWeb.Endpoint,
  live_reload: [
    patterns: [
      ~r"priv/static/.*(js|css|png|jpeg|jpg|gif|svg)$",
      ~r"priv/gettext/.*(po)$",
      ~r"lib/ingest_web/(controllers|live|components)/.*(ex|heex)$"
    ]
  ]

# Enable dev routes for dashboard and mailbox
config :ingest, dev_routes: true

# Do not include metadata nor timestamps in development logs
config :logger, :console, format: "[$level] $message\n"

# Set a higher stacktrace during development. Avoid configuring such
# in production as building large stacktraces may be expensive.
config :phoenix, :stacktrace_depth, 20

# Initialize plugs at runtime for faster development compilation
config :phoenix, :plug_init_mode, :runtime

# Disable swoosh api client as it is only required for production adapters.
config :swoosh, :api_client, false

config :ingest, :openid_connect_oneid,
  issuer: "https://identity-preview.inl.gov",
  client_id: "",
  client_secret: "",
  redirect_uri: "http://localhost:4000/users/log_in/one_id",
  response_type: "code",
  scope: "openid email profile",
  ca_cert: "/etc/ssl/certs/CAINLROOT.cer"

config :ingest, :openid_connect_okta,
  issuer: "https://identity-preview.inl.gov",
  client_id: "",
  client_secret: "",
  redirect_uri: "http://localhost:4000/users/log_in/okta",
  response_type: "code",
  scope: "openid email profile",
  ca_cert: "/etc/ssl/certs/CAINLROOT.cer"

config :ingest, :ca_certfile_path, "/etc/ssl/certs/CAINLROOT.cer"
config :ingest, :environment, :dev
# display the classification of data warning banner
config :ingest, :show_classifications, true
config :ingest, :hide_public_login, false

config :ingest, Ingest.Mailer,
  adapter: Swoosh.Adapters.SMTP,
  relay: "mailhost.inl.gov",
  tls: false

config :ingest, :datahub,
  token: "",
  gms_url: "",
  url: ""

config :ingest, :lakefs,
  url: "",
  access_key: "",
  secret_access_key: ""
